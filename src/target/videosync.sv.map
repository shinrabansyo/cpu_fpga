{"version":3,"file":"videosync.sv.map","sources":["../src/videosync.veryl"],"names":["","\n    module videosync #(\n    parameter H_FRONT_PORCH = 16,\n    parameter H_SYNC_PULSE = 96,\n    parameter H_BACK_PORCH = 48,\n    parameter H_ACTIVE_AREA = 640,\n    parameter V_FRONT_PORCH = 10,\n    parameter V_SYNC_PULSE = 2,\n    parameter V_BACK_PORCH = 33,\n    parameter V_ACTIVE_AREA = 480,\n\n    // Additional parameters from VHDL\n    parameter string BAR_MODE = \"WIDE\", // \"WIDE\" or \"SD\"\n    parameter string COLORSPACE = \"RGB\", // \"RGB\", \"BT601\", \"BT709\"\n    parameter string START_SIG = \"SINGLE\", // \"SINGLE\" or \"WIDTH\"\n    parameter int EARLY_REQ = 0, // 0-16\n    parameter int FRAME_TOP = 0,\n    parameter int START_HPOS = 0,\n    parameter int START_VPOS = 0\n    ) (\n    input clk,\n    input rst,\n    // Add scan_ena input\n    input scan_ena,\n\n    output logic hsync,\n    output logic vsync,\n    output logic de,\n    output logic [10:0] hcount,\n    output logic [10:0] vcount,\n\n    // Add new outputs\n    output logic framestart,\n    output logic linestart,\n    output logic pixrequest,\n    output logic [3:0] hdmicontrol,\n    output logic hblank,\n    output logic vblank,\n    output logic csync,\n    output logic [7:0] cb_rout,\n    output logic [7:0] cb_gout,\n    output logic [7:0] cb_bout\n    );\n\n    // Horizontal timing parameters\n    localparam H_TOTAL = H_FRONT_PORCH + H_SYNC_PULSE + H_BACK_PORCH + H_ACTIVE_AREA;\n\n    // Vertical timing parameters\n    localparam V_TOTAL = V_FRONT_PORCH + V_SYNC_PULSE + V_BACK_PORCH + V_ACTIVE_AREA;\n\n    // Internal signals\n    logic hsync_reg;\n    logic vsync_reg;\n    logic csync_reg;\n    logic hblank_reg;\n    logic vblank_reg;\n    logic request_reg;\n    logic preamble_reg;\n    logic guard_reg;\n    logic packet_reg;\n    logic active_sig;\n\n    logic vs_old_reg;\n    logic hs_old_reg;\n    logic scan_in_reg;\n    logic scanena_reg;\n    logic hsync_rise;\n    logic vsync_rise;\n\n    typedef enum {\n        LEFTBAND1, WHITE, YELLOW, CYAN, GREEN, MAGENTA, RED, BLUE, RIGHTBAND1,\n        LEFTBAND2, FULLWHITE, GRAY, RIGHTBAND2,\n        LEFTBAND3, WHITELAMP, RIGHTBAND3,\n        LEFTBAND4, REDLAMP, RIGHTBAND4,\n        LEFTBAND5, GREENLAMP, RIGHTBAND5,\n        LEFTBAND6, BLUELAMP, RIGHTBAND6\n    } STATE_CB_AREA;\n    STATE_CB_AREA areastate;\n    logic [3*8-1:0] cb_rgb_reg;\n    logic [15:0] cblamp_reg;\n    logic [7:0] chroma_sig;\n\n    // Constant declarations (from VHDL)\n    localparam PREAMBLE_WIDTH = 8;\n    localparam GUARDBAND_WIDTH = 2;\n    localparam PACKETAREA_WIDTH = PREAMBLE_WIDTH + GUARDBAND_WIDTH*2 + 32 + 2;\n    localparam ISLANDGAP_WIDTH = 4;\n\n    // Function to calculate colorbar band positions\n    function int cb_band(int N);\n        int start = H_SYNC_PULSE + H_BACK_PORCH - EARLY_REQ - 1;\n        begin\n        if (BAR_MODE == \"WIDE\") begin\n            if (N == 0) cb_band = start + H_ACTIVE_AREA/8;\n            else if (N == 8) cb_band = start + H_ACTIVE_AREA;\n            else if (N == 9) cb_band = start + H_ACTIVE_AREA/8 + (3 * H_ACTIVE_AREA * 3)/(28*2);\n            else if (N == 10) cb_band = start + H_ACTIVE_AREA/8 + (7 * H_ACTIVE_AREA * 3)/(28*2);\n            else cb_band = start + H_ACTIVE_AREA/8 + (N * H_ACTIVE_AREA * 3)/28;\n        end else begin\n            if (N == 0) cb_band = start;\n            else if (N == 7) cb_band = start + H_ACTIVE_AREA;\n            else if (N == 8) cb_band = start + H_ACTIVE_AREA + 1;\n            else if (N == 9) cb_band = start + (3 * H_ACTIVE_AREA)/(7*2);\n            else if (N == 10) cb_band = start + (7 * H_ACTIVE_AREA)/(7*2);\n            else cb_band = start + (N * H_ACTIVE_AREA)/7;\n        end\n        end\n    endfunction\n\n    // Function to calculate colorbar lamp begin\n    function int cb_lampbegin();\n        begin\n        if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") cb_lampbegin = 16;\n        else cb_lampbegin = 0;\n        end\n    endfunction\n\n    // Function to calculate colorbar lamp end\n    function int cb_lampend();\n        begin\n        if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") cb_lampend = 235;\n        else cb_lampend = 255;\n        end\n    endfunction\n\n    // Function to calculate colorbar lamp step\n    function int cb_lampstep();\n        begin\n        if (BAR_MODE == \"WIDE\") cb_lampstep = (cb_lampend() - cb_lampbegin()) * 256 / ((H_ACTIVE_AREA * 3 / 4) - 1);\n        else cb_lampstep = (cb_lampend() - cb_lampbegin()) * 256 / (H_ACTIVE_AREA - 1);\n        end\n    endfunction\n\n    // Function to convert RGB to YCbCr or return RGB based on COLORSPACE\n    function logic [23:0] cb_color(real R, real G, real B);\n        real y, cb, cr;\n        begin\n        if (COLORSPACE == \"BT601\") begin\n            y  = 0.299*R + 0.587*G + 0.114*B;\n            cb = 0.564*(B - y);\n            cr = 0.713*(R - y);\n            cb_color = {logic[7:0](int(224.0*cr+128.0)), logic[7:0](int(219.0*y + 16.0)), logic[7:0](int(224.0*cb+128.0))};\n        end else if (COLORSPACE == \"BT709\") begin\n            y  = 0.2126*R + 0.7152*G + 0.0722*B;\n            cb = 0.5389*(B - y);\n            cr = 0.6350*(R - y);\n            cb_color = {logic[7:0](int(224.0*cr+128.0)), logic[7:0](int(219.0*y + 16.0)), logic[7:0](int(224.0*cb+128.0))};\n        end else begin\n            cb_color = {logic[7:0](int(R*255.0)), logic[7:0](int(G*255.0)), logic[7:0](int(B*255.0))};\n        end\n        end\n    endfunction\n\n    localparam CB_LEFTBAND = cb_band(0);\n    localparam CB_75WHITE = cb_band(1);\n    localparam CB_75YELLOW = cb_band(2);\n    localparam CB_75CYAN = cb_band(3);\n    localparam CB_75GREEN = cb_band(4);\n    localparam CB_75MAGENTA = cb_band(5);\n    localparam CB_75RED = cb_band(6);\n    localparam CB_75BLUE = cb_band(7);\n    localparam CB_RIGHTBAND = cb_band(8);\n    localparam CB_BLACKBAND = cb_band(9);\n    localparam CB_WHITEBAND = cb_band(10);\n    localparam CB_NORMAL_V = V_SYNC_PULSE + V_BACK_PORCH + (V_ACTIVE_AREA*7)/12 - 1;\n    localparam CB_GRAY_V = V_SYNC_PULSE + V_BACK_PORCH + (V_ACTIVE_AREA*8)/12 - 1;\n    localparam CB_WLAMP_V = V_SYNC_PULSE + V_BACK_PORCH + (V_ACTIVE_AREA*9)/12 - 1;\n    localparam CB_RLAMP_V = V_SYNC_PULSE + V_BACK_PORCH + (V_ACTIVE_AREA*10)/12 - 1;\n    localparam CB_GLAMP_V = V_SYNC_PULSE + V_BACK_PORCH + (V_ACTIVE_AREA*11)/12 - 1;\n    localparam CB_BLAMP_V = V_SYNC_PULSE + V_BACK_PORCH + V_ACTIVE_AREA - 1;\n\n    localparam logic [23:0] COLOR_BLACK = cb_color(0.0 , 0.0 , 0.0 );\n    localparam logic [23:0] COLOR_WHITE = cb_color(1.0 , 1.0 , 1.0 );\n    localparam logic [23:0] COLOR_YELLOW = cb_color(1.0 , 1.0 , 0.0 );\n    localparam logic [23:0] COLOR_CYAN = cb_color(0.0 , 1.0 , 1.0 );\n    localparam logic [23:0] COLOR_RED = cb_color(1.0 , 0.0 , 0.0 );\n    localparam logic [23:0] COLOR_BLUE = cb_color(0.0 , 0.0 , 1.0 );\n    localparam logic [23:0] COLOR_15WHITE = cb_color(0.15, 0.15, 0.15);\n    localparam logic [23:0] COLOR_40WHITE = cb_color(0.40, 0.40, 0.40);\n    localparam logic [23:0] COLOR_75WHITE = cb_color(0.75, 0.75, 0.75);\n    localparam logic [23:0] COLOR_75YELLOW = cb_color(0.75, 0.75, 0.0 );\n    localparam logic [23:0] COLOR_75CYAN = cb_color(0.0 , 0.75, 0.75);\n    localparam logic [23:0] COLOR_75GREEN = cb_color(0.0 , 0.75, 0.0 );\n    localparam logic [23:0] COLOR_75MAGENTA = cb_color(0.75, 0.0 , 0.75);\n    localparam logic [23:0] COLOR_75RED = cb_color(0.75, 0.0 , 0.0 );\n    localparam logic [23:0] COLOR_75BLUE = cb_color(0.0 , 0.0 , 0.75);\n\n    // Horizontal counters\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        hcount <= 0;\n        end else begin\n        if (hcount == H_TOTAL - 1) begin\n            hcount <= 0;\n        end else begin\n            hcount <= hcount + 1;\n        end\n        end\n    end\n\n    // Vertical counters\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        vcount <= 0;\n        end else begin\n        if (hcount == H_TOTAL - 1) begin\n            if (vcount == V_TOTAL - 1) begin\n            vcount <= 0;\n            end else begin\n            vcount <= vcount + 1;\n            end\n        end\n        end\n    end\n\n    // Horizontal sync generation\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        hsync <= 0;\n        end else begin\n        if ((hcount >= H_FRONT_PORCH) && (hcount < H_FRONT_PORCH + H_SYNC_PULSE)) begin\n            hsync <= 0;\n        end else begin\n            hsync <= 1;\n        end\n        end\n    end\n\n    // Vertical sync generation\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        vsync <= 0;\n        end else begin\n        if ((vcount >= V_FRONT_PORCH) && (vcount < V_FRONT_PORCH + V_SYNC_PULSE)) begin\n            vsync <= 0;\n        end else begin\n            vsync <= 1;\n        end\n        end\n    end\n\n    // Data enable generation\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        de <= 0;\n        end else begin\n        if ((hcount >= H_FRONT_PORCH + H_SYNC_PULSE + H_BACK_PORCH) && (hcount < H_FRONT_PORCH + H_SYNC_PULSE + H_BACK_PORCH + H_ACTIVE_AREA) &&\n            (vcount >= V_FRONT_PORCH + V_SYNC_PULSE + V_BACK_PORCH) && (vcount < V_FRONT_PORCH + V_SYNC_PULSE + V_BACK_PORCH + V_ACTIVE_AREA)) begin\n            de <= 1;\n        end else begin\n            de <= 0;\n        end\n        end\n    end\n\n    // Video Sync Signal Generation (adapted from VHDL)\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        hsync_reg <= 0;\n        vsync_reg <= 0;\n        csync_reg <= 0;\n        hblank_reg <= 1;\n        vblank_reg <= 1;\n        request_reg <= 0;\n        preamble_reg <= 0;\n        guard_reg <= 0;\n        packet_reg <= 0;\n        end else begin\n        if (hcount == H_TOTAL - 1) begin\n            hsync_reg <= 1;\n        end else if (hcount == H_SYNC_PULSE - 1) begin\n            hsync_reg <= 0;\n        end\n\n        if (hcount == H_TOTAL - 1) begin\n            csync_reg <= 1;\n        end else if ((vsync_reg == 0 && hcount == H_SYNC_PULSE - 1) || (vsync_reg == 1 && hcount == H_TOTAL - H_SYNC_PULSE)) begin\n            csync_reg <= 0;\n        end\n\n        if (hcount == H_SYNC_PULSE + H_BACK_PORCH - 1) begin\n            hblank_reg <= 0;\n        end else if (hcount == H_SYNC_PULSE + H_BACK_PORCH + H_ACTIVE_AREA - 1) begin\n            hblank_reg <= 1;\n        end\n\n        if (hcount == H_TOTAL - 1) begin\n            if (vcount == V_TOTAL - 1) begin\n            vsync_reg <= 1;\n            end else if (vcount == V_SYNC_PULSE - 1) begin\n            vsync_reg <= 0;\n            end\n\n            if (vcount == V_SYNC_PULSE + V_BACK_PORCH - 1) begin\n            vblank_reg <= 0;\n            end else if (vcount == V_SYNC_PULSE + V_BACK_PORCH + V_ACTIVE_AREA - 1) begin\n            vblank_reg <= 1;\n            end\n        end\n\n        if (vblank_reg == 0) begin\n            if (hcount == H_SYNC_PULSE + H_BACK_PORCH - EARLY_REQ - 1) begin\n            request_reg <= 1;\n            end else if (hcount == H_SYNC_PULSE + H_BACK_PORCH + H_ACTIVE_AREA - EARLY_REQ - 1) begin\n            request_reg <= 0;\n            end\n\n            if (hcount == H_SYNC_PULSE + H_BACK_PORCH - (PREAMBLE_WIDTH + GUARDBAND_WIDTH) - 1) begin\n            preamble_reg <= 1;\n            end else if (hcount == H_SYNC_PULSE + H_BACK_PORCH - GUARDBAND_WIDTH - 1) begin\n            preamble_reg <= 0;\n            guard_reg <= 1;\n            end else if (hcount == H_SYNC_PULSE + H_BACK_PORCH - 1) begin\n            guard_reg <= 0;\n            end\n\n            if (hcount == H_SYNC_PULSE + H_BACK_PORCH - (PACKETAREA_WIDTH + ISLANDGAP_WIDTH + PREAMBLE_WIDTH + GUARDBAND_WIDTH) - 1) begin\n            packet_reg <= 0;\n            end else if (hcount == H_SYNC_PULSE + H_BACK_PORCH + H_ACTIVE_AREA + ISLANDGAP_WIDTH - 1) begin\n            packet_reg <= 1;\n            end\n        end else begin\n            packet_reg <= 1;\n        end\n        end\n    end\n\n    assign active_sig = (hblank_reg == 0 && vblank_reg == 0) ? 1 : 0;\n\n    assign hdmicontrol[0] = active_sig;\n    assign hdmicontrol[1] = preamble_reg;\n    assign hdmicontrol[2] = guard_reg;\n    assign hdmicontrol[3] = packet_reg;\n\n    assign hblank = hblank_reg;\n    assign vblank = vblank_reg;\n    assign csync = csync_reg;\n\n    // Frame data read signal generation\n    assign hsync_rise = (hs_old_reg == 0 && hsync_reg == 1);\n    assign vsync_rise = (vs_old_reg == 0 && vsync_reg == 1);\n\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        vs_old_reg <= 0;\n        hs_old_reg <= 0;\n        scan_in_reg <= 0;\n        scanena_reg <= 0;\n        end else begin\n        vs_old_reg <= vsync_reg;\n        hs_old_reg <= hsync_reg;\n        scan_in_reg <= scan_ena;\n\n        if (vsync_rise) begin\n            scanena_reg <= scan_in_reg;\n        end\n        end\n    end\n\n    // Generate framestart and linestart signals\n    if (START_SIG == \"SINGLE\") begin : gen_pulse\n        assign framestart = (hcount == 0 && vcount == FRAME_TOP) ? 1 : 0;\n        assign linestart = (hsync_rise && vblank_reg == 0) ? scanena_reg : 0;\n    end else begin : gen_width\n        assign framestart = (hsync_reg == 1 && vcount == FRAME_TOP) ? 1 : 0;\n        assign linestart = (hsync_reg == 1 && vblank_reg == 0) ? scanena_reg : 0;\n    end\n\n    assign pixrequest = (request_reg == 1) ? scanena_reg : 0;\n\n    // Colorbar signal generation\n    logic [7:0] chroma_sig_temp;\n    assign chroma_sig_temp = cblamp_reg[15:8] + 2; // Color difference lamp center position correction\n\n    always_ff @(posedge clk) begin\n        if (rst) begin\n        areastate <= LEFTBAND1;\n        cblamp_reg <= 0;\n        cb_rgb_reg <= 0;\n        end else begin\n        if (hcount == CB_LEFTBAND-1) begin\n            cblamp_reg <= {logic[7:0](cb_lampbegin()), 8'h00};\n        end else begin\n            cblamp_reg <= cblamp_reg + cb_lampstep();\n        end\n\n        case (areastate)\n            LEFTBAND1: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= WHITE;\n                cb_rgb_reg <= COLOR_75WHITE;\n            end\n            end\n            WHITE: begin\n            if (hcount == CB_75WHITE) begin\n                areastate <= YELLOW;\n                cb_rgb_reg <= COLOR_75YELLOW;\n            end\n            end\n            YELLOW: begin\n            if (hcount == CB_75YELLOW) begin\n                areastate <= CYAN;\n                cb_rgb_reg <= COLOR_75CYAN;\n            end\n            end\n            CYAN: begin\n            if (hcount == CB_75CYAN) begin\n                areastate <= GREEN;\n                cb_rgb_reg <= COLOR_75GREEN;\n            end\n            end\n            GREEN: begin\n            if (hcount == CB_75GREEN) begin\n                areastate <= MAGENTA;\n                cb_rgb_reg <= COLOR_75MAGENTA;\n            end\n            end\n            MAGENTA: begin\n            if (hcount == CB_75MAGENTA) begin\n                areastate <= RED;\n                cb_rgb_reg <= COLOR_75RED;\n            end\n            end\n            RED: begin\n            if (hcount == CB_75RED) begin\n                areastate <= BLUE;\n                cb_rgb_reg <= COLOR_75BLUE;\n            end\n            end\n            BLUE: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND1;\n                cb_rgb_reg <= COLOR_40WHITE;\n            end\n            end\n            RIGHTBAND1: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_NORMAL_V) begin\n                areastate <= LEFTBAND2;\n                cb_rgb_reg <= COLOR_CYAN;\n                end else begin\n                areastate <= LEFTBAND1;\n                end\n            end\n            end\n            LEFTBAND2: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= FULLWHITE;\n                cb_rgb_reg <= COLOR_WHITE;\n            end\n            end\n            FULLWHITE: begin\n            if (hcount == CB_75WHITE) begin\n                areastate <= GRAY;\n                cb_rgb_reg <= COLOR_75WHITE;\n            end\n            end\n            GRAY: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND2;\n                cb_rgb_reg <= COLOR_BLUE;\n            end\n            end\n            RIGHTBAND2: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_GRAY_V) begin\n                areastate <= LEFTBAND3;\n                cb_rgb_reg <= COLOR_YELLOW;\n                end else begin\n                areastate <= LEFTBAND2;\n                cb_rgb_reg <= COLOR_CYAN;\n                end\n            end\n            end\n            LEFTBAND3: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= WHITELAMP;\n\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Y LAMP Begin\n                cb_rgb_reg <= {8'h80, cblamp_reg[15:8], 8'h80};\n                end else begin\n                // WHITE LAMP Begin\n                cb_rgb_reg <= {cblamp_reg[15:8], cblamp_reg[15:8], cblamp_reg[15:8]};\n                end\n            end\n            end\n            WHITELAMP: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND3;\n                cb_rgb_reg <= COLOR_RED;\n            end else begin\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Y LAMP\n                cb_rgb_reg <= {8'h80, cblamp_reg[15:8], 8'h80};\n                end else begin\n                // WHITE LAMP\n                cb_rgb_reg <= {cblamp_reg[15:8], cblamp_reg[15:8], cblamp_reg[15:8]};\n                end\n            end\n            end\n            RIGHTBAND3: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_WLAMP_V) begin\n                areastate <= LEFTBAND4;\n                cb_rgb_reg <= COLOR_15WHITE;\n                end else begin\n                areastate <= LEFTBAND3;\n                cb_rgb_reg <= COLOR_YELLOW;\n                end\n            end\n            end\n            LEFTBAND4: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= REDLAMP;\n\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Cr LAMP (50% Y) Begin\n                cb_rgb_reg <= {chroma_sig_temp, 8'h80, 8'h80};\n                end else begin\n                // RED LAMP begin\n                cb_rgb_reg <= {cblamp_reg[15:8], 8'h00, 8'h00};\n                end\n            end\n            end\n            REDLAMP: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND4;\n                cb_rgb_reg <= COLOR_15WHITE;\n            end else begin\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Cr LAMP (50% Y)\n                cb_rgb_reg <= {chroma_sig_temp, 8'h80, 8'h80};\n                end else begin\n                // RED LAMP\n                cb_rgb_reg[23:16] <= cblamp_reg[15:8];\n                end\n            end\n            end\n            RIGHTBAND4: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_RLAMP_V) begin\n                areastate <= LEFTBAND5;\n                end else begin\n                areastate <= LEFTBAND4;\n                end\n            end\n            end\n            LEFTBAND5: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= GREENLAMP;\n\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Cb LAMP (50% Y) begin\n                cb_rgb_reg <= {8'h80, 8'h80, chroma_sig_temp};\n                end else begin\n                // GREEN LAMP begin\n                cb_rgb_reg <= {8'h00, cblamp_reg[15:8], 8'h00};\n                end\n            end\n            end\n            GREENLAMP: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND5;\n                cb_rgb_reg <= COLOR_15WHITE;\n            end else begin\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // Cb LAMP (50% Y)\n                cb_rgb_reg <= {8'h80, 8'h80, chroma_sig_temp};\n                end else begin\n                // GREEN LAMP\n                cb_rgb_reg[15:8] <= cblamp_reg[15:8];\n                end\n            end\n            end\n            RIGHTBAND5: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_GLAMP_V) begin\n                areastate <= LEFTBAND6;\n                end else begin\n                areastate <= LEFTBAND5;\n                end\n            end\n            end\n            LEFTBAND6: begin\n            if (hcount == CB_LEFTBAND) begin\n                areastate <= BLUELAMP;\n\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // 0%/100% BAR Begin\n                cb_rgb_reg <= COLOR_BLACK;\n                end else begin\n                // BLUE LAMP Begin\n                cb_rgb_reg <= {8'h00, 8'h00, cblamp_reg[15:8]};\n                end\n\n            end\n            end\n            BLUELAMP: begin\n            if (hcount == CB_75BLUE) begin\n                areastate <= RIGHTBAND6;\n                cb_rgb_reg <= COLOR_15WHITE;\n            end else begin\n                if (COLORSPACE == \"BT601\" || COLORSPACE == \"BT709\") begin\n                // 0%/100% BAR\n                if (hcount == CB_BLACKBAND) begin\n                    cb_rgb_reg <= COLOR_WHITE;\n                end else if (hcount == CB_WHITEBAND) begin\n                    cb_rgb_reg <= COLOR_BLACK;\n                end\n                end else begin\n                // BLUE LAMP\n                cb_rgb_reg[7:0] <= cblamp_reg[15:8];\n                end\n            end\n            end\n            RIGHTBAND6: begin\n            if (hcount == CB_RIGHTBAND) begin\n                if (vcount == CB_BLAMP_V) begin\n                areastate <= LEFTBAND1;\n                cb_rgb_reg <= COLOR_40WHITE;\n                end else begin\n                areastate <= LEFTBAND6;\n                end\n            end\n            end\n            default: areastate <= LEFTBAND1;\n        endcase\n        end\n    end\n\n    assign cb_rout = (request_reg == 1) ? cb_rgb_reg[23:16] : 8'h00;\n    assign cb_gout = (request_reg == 1) ? cb_rgb_reg[15:8] : 8'h00;\n    assign cb_bout = (request_reg == 1) ? cb_rgb_reg[7:0] : 8'h00;\n\n    endmodule"],"mappings":"AAAAA,AAAiBC"}